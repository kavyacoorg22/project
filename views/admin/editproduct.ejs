<form id="editProductForm" enctype="multipart/form-data" method="POST">
  <div class="form-layout">
    <div class="form-left">
      <div class="form-group">
        <label class="form-label">Product title</label>
        <input type="text" name="name" class="form-input" value="<%=product.name%>" required>
      </div>

      <div class="form-group">
        <label class="form-label">Full description</label>
        <textarea name="description" class="form-textarea" required><%=product.description%></textarea>
      </div>

      <div class="form-group">
        <label class="form-label">Media</label>
        <div class="image-grid">
          <div class="image-item">
            <img id="previewImage" src="/img/productsimg/<%= product.images[0]%>" alt="Product image">
          </div>
          <div class="upload-box">
            <input type="file" name="image" id="upload-image" style="display: none;" accept="image/*">
            <label for="upload-image" class="upload-icon">+</label>
            <div>Upload new image</div>
          </div>
        </div>
      </div>
    </div>

    <div class="form-right">
      <div class="form-group">
        <label class="form-label">Price</label>
        <input type="number" name="price" class="form-input" value="<%=product.price%>" required>
      </div>

      <div class="form-group">
        <label class="form-label">Category</label>
        <select name="category" class="form-select" required>
          <% categories.forEach(category => { %>
            <option value="<%=category.id%>" <%= product.category == category.id ? 'selected' : '' %>>
              <%=category.name%>
            </option>
          <% }) %>
        </select>
      </div>

      <div class="form-group">
        <label class="form-label">Status</label>
        <select name="status" class="form-select" required>
          <option value="<%=product.status%>" selected><%=product.status%></option>
          <option value="out-of-stock">Out of stock</option>
        </select>
      </div>

      <div class="form-group">
        <label class="form-label">Quantity</label>
        <input type="number" name="quantity" class="form-input" value="<%=product.quantity%>" required>
      </div>
    </div>
  </div>

  <div class="button-group">
    <button type="button" class="btn btn-cancel" onclick="window.location.href='/admin/product'">Cancel</button>
    <button type="submit" class="btn btn-save">Save Changes</button>
  </div>
</form>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('editProductForm');
  const uploadInput = document.getElementById('upload-image');
  const previewImage = document.getElementById('previewImage');
  let newImageFile = null;

  // Preview image before upload
  uploadInput.addEventListener('change', function(event) {
    const file = event.target.files[0];
    if (file) {
      newImageFile = file;
      const reader = new FileReader();
      reader.onload = function(e) {
        previewImage.src = e.target.result;
      };
      reader.readAsDataURL(file);
    }
  });

  // Handle form submission
  form.addEventListener('submit', async function(e) {
    e.preventDefault();

    try {
      // Show loading state
      Swal.fire({
        title: 'Saving changes...',
        didOpen: () => Swal.showLoading()
      });

      const formData = new FormData(form);
      
      // Only append the image if a new one was selected
      if (newImageFile) {
        formData.set('image', newImageFile);
      }

      const response = await fetch(`/admin/product/edit/<%= product._id %>`, {
        method: 'POST',
        body: formData
      });

      // First check if response is ok before trying to parse JSON
      if (!response.ok) {
        const errorText = await response.text();
        let errorMessage;
        try {
          const errorJson = JSON.parse(errorText);
          errorMessage = errorJson.message || 'Failed to update product';
        } catch (e) {
          errorMessage = errorText || 'Failed to update product';
        }
        throw new Error(errorMessage);
      }

      const result = await response.json();
      
      await Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: 'Product updated successfully',
        timer: 1500
      });
      window.location.href = '/admin/product';
      
    } catch (error) {
      console.error('Error:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to update product'
      });
    }
  });
});
</script>