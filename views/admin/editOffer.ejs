<div class="add-offer-container">
  <h2 class="add-offer-title">Edit offer</h2>
  <p class="add-offer-description">Edit offer for your store</p>

  <form class="add-offer-form" id="editOfferForm">
    <div class="form-row">
      <div class="form-group col-md-6">
        <label for="offer-name">Offer name</label>
        <input type="text" id="offer-name" name="name" class="form-control" value="<%=offer.name%>" required>
      </div>
      <div class="form-group col-md-6">
        <label for="discount-amount">Discount amount</label>
        <input type="number" id="discount-amount" name="offer" class="form-control" value="<%=offer.offer%>" min="0" max="100" required>
      </div>
    </div>

    <div class="form-row">
      <div class="form-group col-md-6">
        <label for="offer-description">Description</label>
        <textarea id="offer-description" name="description" class="form-control" rows="3" required><%=offer.description%></textarea>
      </div>
      <div class="form-group col-md-6">
        <label for="status">Status</label>
        <select id="status" name="status" class="form-control">
          <option value="Active" <%=offer.status === 'Active' ? 'selected' : ''%>>Active</option>
          <option value="Inactive" <%=offer.status === 'Inactive' ? 'selected' : ''%>>Inactive</option>
        </select>
      </div>
    </div>

    <div class="form-row">
      <div class="form-group col-md-6">
        <label for="offer-product">Offer Type</label>
        <select id="offer-product" name="productCategory" class="form-control" required>
          <option value="product" <%=offer.productCategory === 'product' ? 'selected' : ''%>>Product</option>
          <option value="category" <%=offer.productCategory === 'category' ? 'selected' : ''%>>Category</option>
        </select>
      </div>
      <div class="form-group col-md-6">
        <label for="applicable-product">Applicable Item</label>
        <select id="applicable-product" name="productCategoryID" class="form-control" required>
          <% if(offer.productCategory === 'product') { %>
            <% products.forEach(product => { %>
              <option value="<%=product._id%>" <%=product._id.toString() === offer.productCategoryID.toString() ? 'selected' : ''%>>
                <%=product.name%>
              </option>
            <% }) %>
          <% } else { %>
            <% categories.forEach(category => { %>
              <option value="<%=category._id%>" <%=category._id.toString() === offer.productCategoryID.toString() ? 'selected' : ''%>>
                <%=category.name%>
              </option>
            <% }) %>
          <% } %>
        </select>
      </div>
    </div>

    <div class="form-row">
      <div class="form-group col-md-6">
        <label for="activation-date">Activation Date</label>
        <input type="date" id="activation-date" name="startDate" class="form-control" 
          value="<%=new Date(offer.startDate).toISOString().split('T')[0]%>" required>
      </div>
      <div class="form-group col-md-6">
        <label for="expiry-date">Expiry Date</label>
        <input type="date" id="expiry-date" name="endDate" class="form-control" 
          value="<%=new Date(offer.endDate).toISOString().split('T')[0]%>" required>
      </div>
    </div>

    <div class="form-actions">
      <button type="button" class="btn btn-secondary" onclick="window.location.href='/admin/offer'">Cancel</button>
      <button type="submit" class="btn btn-primary">Update Offer</button>
    </div>
  </form>
</div>

<script>
document.getElementById('offer-product').addEventListener('change', async function() {
  const type = this.value;
  const applicableSelect = document.getElementById('applicable-product');
  
  try {
    const response = await fetch(`/admin/offer/getApplicable/${type}`);
    const items = await response.json();
    
    applicableSelect.innerHTML = '';
    items.forEach(item => {
      const option = new Option(item.name, item._id);
      applicableSelect.add(option);
    });
  } catch (error) {
    console.error('Error fetching items:', error);
  }
});

document.getElementById('editOfferForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  const formData = new FormData(this);
  const formObject = Object.fromEntries(formData);
  
  // Ensure dates are properly formatted as ISO strings
  if (formObject.startDate) {
    formObject.startDate = new Date(formObject.startDate).toISOString();
  }
  if (formObject.endDate) {
    formObject.endDate = new Date(formObject.endDate).toISOString();
  }
  
  const offerId = '<%=offer._id%>';
  
  try {
    const response = await fetch(`/admin/offer/edit/${offerId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(formObject)
    });
    
    const data = await response.json();
    
    if (response.ok) {
      // Show success message and wait for user to click OK before redirecting
      await Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: 'Offer updated successfully',
        confirmButtonText: 'OK'
      });
      // Only redirect after user clicks OK
      window.location.href = '/admin/offer';
    } else {
      throw new Error(data.message || 'Failed to update offer');
    }
  } catch (error) {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message
    });
    console.error('Error:', error);
  }
});

document.addEventListener('DOMContentLoaded', function() {
  const startDateInput = document.getElementById('activation-date');
  const endDateInput = document.getElementById('expiry-date');

  // Set minimum date for both inputs to prevent past dates
  const today = new Date().toISOString().split('T')[0];
  startDateInput.min = today;
  endDateInput.min = today;

  // Update end date minimum when start date changes
  startDateInput.addEventListener('change', function() {
    endDateInput.min = this.value;
    if (endDateInput.value && endDateInput.value < this.value) {
      endDateInput.value = this.value;
    }
  });

  // Ensure end date is not before start date
  endDateInput.addEventListener('change', function() {
    if (this.value < startDateInput.value) {
      this.value = startDateInput.value;
      Swal.fire({
        icon: 'warning',
        title: 'Invalid Date',
        text: 'End date cannot be before start date'
      });
    }
  });
});
</script> 

