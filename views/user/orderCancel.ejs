<div class="hero-wrap hero-bread" style="background-image: url('/images/bg_1.jpg');">
  <div class="container">
    <div class="row no-gutters slider-text align-items-center justify-content-center">
      <div class="col-md-9 ftco-animate text-center">
        <p class="breadcrumbs">
          <span class="mr-2"><a href="/user/home">Home</a></span> 
          <% if(currentPage !== 'Home') { %>
              <span><%= currentPage %></span>
          <% } %>
      </p>
        <h1 class="mb-0 bread">Cancel Order</h1>
      </div>
    </div>
  </div>
</div>


<div class="layout-wrapper">
  <!-- Sidebar -->
  <aside class="sidebar">
      <a href="/user/profile"><span>Profile</span></a>
      <a href="/user/address"><span>Address</span></a>
      <a href="#" class="active"><span>Order</span></a>
      <a href="/user/wallet"><span>Wallet</span></a>
      <a href="/user/logout" class="logout" onclick="logout(event)"><span>Logout</span></a>
  </aside>

  <!-- Main Content -->
  <main class="main-content">
      <div class="cancel-order-container">
          <h1 class="cancel-order-title">ORDER CANCEL</h1>
          <label class="cancel-reason-label">REASON FOR CANCELLATION</label>
          <textarea 
              class="cancel-reason-textarea" 
              placeholder="Please provide your reason for cancellation..."
          ></textarea>
          <div class="buttons-container">
              <button class="cancel-button"  data-productid="<%= productId %>" 
                data-orderid="<%= orderID %>">CANCEL</button>
          </div>
      </div>
  </main>
</div>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    const cancelProductButtons = document.querySelectorAll('.cancel-button');

    cancelProductButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        const textarea = document.querySelector('.cancel-reason-textarea');
        const cancelReason = textarea.value.trim();

        // Check if textarea is empty
        if (!cancelReason) {
          Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Please provide a reason for cancellation'
          });
          return;
        }

        const productId = e.target.dataset.productid;
        const orderID = e.target.dataset.orderid;
       
        if (!productId || !orderID) {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Missing product or order ID'
          });
          return;
        }

        try {
          const response = await fetch(`/user/cancelOrder/${orderID}/${productId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ cancelReason })
          });

          const result = await response.json();

          if (result.success) {
            Swal.fire({
              icon: 'success',
              title: 'Product Cancellation',
              text: 'Product cancellation request submitted'
            }).then(() => {
              window.location.href = '/user/orderHistory';
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Cancellation Failed',
              text: result.message
            });
          }
        } catch (error) {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred'
          });
        }
      });
    });
  });
</script>