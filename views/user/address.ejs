<div class="hero-wrap hero-bread" style="background-image: url('/images/bg_1.jpg');">
    <div class="container">
      <div class="row no-gutters slider-text align-items-center justify-content-center">
        <div class="col-md-9 ftco-animate text-center">
          <p class="breadcrumbs">
            <span class="mr-2"><a href="/user/home">Home</a></span> 
            <% if(currentPage !== 'Home') { %>
                <span><%= currentPage %></span>
            <% } %>
        </p>
          <h1 class="mb-0 bread">Address</h1>
        </div>
      </div>
    </div>
  </div>


  <div class="main-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <a href="/user/profile"><span>Profile</span></a>
        <a href="#" class="active"><span>Address</span></a>
        <a href="/user/orderHistory"><span>Order</span></a>
        <a href="/user/wallet"><span>Wallet</span></a>
        <a href="#" class="logout"><span>Logout</span></a>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="add-button-container">
            <button class="add-btn" onclick="openModal()">Add New Address +</button>
        </div>

        <div class="address-container">
            <div class="address-header" onclick="toggleAddresses()">
                <span class="arrow">‚ñº</span>
                <h2>Address Details</h2>
            </div>

            <div class="address-content">
                <div class="no-address" style="display: none;">
                    No address available.
                </div>

                <!-- Address List -->
                <div class="address-list">
                    <% addresses.forEach(address => { %>
                        <div class="address-card" id="address-<%= address._id %>">
                            <h4><%= address.firstname %> <%= address.lastname %></h4>
                            <p><%= address.address %></p>
                            <p><%= address.postalCode %></p>
                            <p><%= address.email %></p>
                            <p><%= address.mobile %></p>
                            <div class="address-actions">
                                <button class="edit-btn" 
                                    data-id="<%= address._id %>"
                                    data-firstname="<%= address.firstname %>"
                                    data-lastname="<%= address.lastname %>"
                                    data-email="<%= address.email %>"
                                    data-mobile="<%= address.mobile %>"
                                    data-postalcode="<%= address.postalCode %>"
                                    data-address="<%= address.address %>"
                                    onclick="editAddress(this)">Edit</button>
                                <button class="delete-btn" onclick="deleteAddress('<%= address._id %>')">üóëÔ∏è</button>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>
        </div>

        <!-- Modal -->
        <div id="addressModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeModal()">&times;</span>
                <h2 id="modalTitle">Add New Address</h2>
                
                <form id="addressForm">
                    <input type="hidden" id="addressId" name="addressId">
                    
                    <div class="form-group">
                        <label>First Name</label>
                        <input type="text" id="firstname" name="firstname">
                    </div>
                    
                    <div class="form-group">
                        <label>Last Name</label>
                        <input type="text" id="lastname" name="lastname">
                    </div>

                    <div class="form-group">
                        <label>Email</label>
                        <input type="email" id="email" name="email">
                    </div>

                    <div class="form-group">
                        <label>Mobile</label>
                        <input type="tel" id="mobile" name="mobile">
                    </div>

                    <div class="form-group">
                        <label>Postal Code</label>
                        <input type="text" id="postal" name="postalCode">
                    </div>

                    <div class="form-group">
                        <label>Address</label>
                        <textarea id="address" name="address"></textarea>
                    </div>

                    <button type="submit" id="submitBtn">Add Address</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
function toggleAddresses() {
    const content = document.querySelector('.address-content');
    const arrow = document.querySelector('.arrow');
    content.classList.toggle('show');
    arrow.classList.toggle('up');
}

function checkAddresses() {
    const addressCards = document.querySelectorAll('.address-card');
    const noAddress = document.querySelector('.no-address');

    if (addressCards.length === 0) {
        noAddress.style.display = 'block';
    } else {
        noAddress.style.display = 'none';
    }
}

let isEditing = false;
const modal = document.getElementById('addressModal');
const modalTitle = document.getElementById('modalTitle');
const submitBtn = document.getElementById('submitBtn');
const form = document.getElementById('addressForm');

function openModal() {
    isEditing = false;
    modalTitle.textContent = 'Add New Address';
    submitBtn.textContent = 'Add Address';
    form.reset();
    document.getElementById('addressId').value = '';
    modal.style.display = 'block';
}

function editAddress(button) {
    isEditing = true;
    modalTitle.textContent = 'Edit Address';
    submitBtn.textContent = 'Update Address';
    
    // Get data from button attributes
    const id = button.getAttribute('data-id');
    const firstname = button.getAttribute('data-firstname');
    const lastname = button.getAttribute('data-lastname');
    const email = button.getAttribute('data-email');
    const mobile = button.getAttribute('data-mobile');
    const postalCode = button.getAttribute('data-postalcode');
    const address = button.getAttribute('data-address');
    
    // Fill form with address data
    document.getElementById('addressId').value = id;
    document.getElementById('firstname').value = firstname;
    document.getElementById('lastname').value = lastname;
    document.getElementById('email').value = email;
    document.getElementById('mobile').value = mobile;
    document.getElementById('postal').value = postalCode;
    document.getElementById('address').value = address;
    
    modal.style.display = 'block';
}

function closeModal() {
    modal.style.display = 'none';
    form.reset();
}

form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const addressId = formData.get('addressId');
    const url = isEditing ? `/user/address/edit/${addressId}` : '/user/address/add';
    
    try {
        const response = await fetch(url, {
            method: isEditing ? 'PUT' : 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(Object.fromEntries(formData))
        });
        
        let result;
        try {
            result = await response.json();
        } catch (jsonError) {
            console.error('Error parsing JSON:', jsonError);
            Swal.fire('Unexpected server response. Please try again later.');
            return;
        }

        if (response.ok) {
            Swal.fire(result.message);
            window.location.href = '/user/address';
        } else {
            Swal.fire(result.message);
        }
    } catch (error) {
        console.error('Fetch error:', error);
        Swal.fire('An error occurred. Please check your network or try again later.');
    }
});

async function deleteAddress(id) {
    try {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        });

        if (result.isConfirmed) {
            const response = await fetch(`/user/address/delete/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (response.ok) {
                document.getElementById(`address-${id}`).remove();
                checkAddresses();
                Swal.fire(
                    'Deleted!',
                    'Address has been deleted.',
                    'success'
                );
            } else {
                throw new Error(data.message || 'Failed to delete address');
            }
        }
    } catch (error) {
        console.error('Delete error:', error);
        Swal.fire(
            'Error!',
            'Failed to delete address.',
            'error'
        );
    }
}

window.onclick = (event) => {
    if (event.target == modal) {
        closeModal();
    }
}

window.onload = checkAddresses;
</script>