<div class="hero-wrap hero-bread" style="background-image: url('/images/bg_1.jpg');">
  <div class="container">
    <div class="row no-gutters slider-text align-items-center justify-content-center">
      <div class="col-md-9 ftco-animate text-center">
        <p class="breadcrumbs">
          <span class="mr-2"><a href="/user/home">Home</a></span> 
          <% if(currentPage !== 'Home') { %>
              <span><%= currentPage %></span>
          <% } %>
      </p>
        <h1 class="mb-0 bread">Cart</h1>
      </div>
    </div>
  </div>
</div>

<section class="ftco-section ftco-cart">
  <div class="container">
    <div class="row">
      <div class="col-md-12 ftco-animate">
        <div class="cart-list">
          <table class="table">
            <thead class="thead-primary">
              <tr class="text-center">
                <th>&nbsp;</th>
                <th>&nbsp;</th>
                <th>Product name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
              </tr>
            </thead>
            <tbody>
              <% if (products && products.length > 0) { %>
                <% products.forEach((item) => { %>
                  <tr class="text-center" data-product-id="<%= item.product._id %>" data-stock="<%= item.product.stock %>">
                    <td class="product-remove">
                      <a href="#"><span class="ion-ios-close"></span></a>
                    </td>
                    <td class="image-prod">
                      <a href="/user/product/<%= item.product._id %>">
                        <img src="/img/productsimg/<%=item.product.images[0]%>" alt="<%=item.product.name%>" class="img" style="width: 100px; height: 100px; object-fit: cover;">
                      </a>
                    </td>
                    <td class="product-name">
                      <a href="/user/product/<%= item.product._id %>" style="text-decoration: none; color: inherit;">
                        <h3><%=item.product.name%></h3>
                        <p><%=item.product.description%></p>
                      </a>
                    </td>
                    <td class="price">₹<%=item.product.price%></td>
                    
                    <td class="quantity">
                      <div class="input-group mb-3">
                        <span class="input-group-btn mr-2">
                          <button type="button" class="quantity-left-minus btn" data-type="minus">
                            <i class="ion-ios-remove"></i>
                          </button>
                        </span>
                        <input type="text" 
                               name="quantity" 
                               class="quantity form-control input-number" 
                               value="<%=item.quantity%>" 
                               min="1" 
                               max="<%=item.product.quantity%>"
                               data-stock="<%=item.product.quantity%>"
                               data-product-id="<%=item.product._id%>"
                               readonly>
                        <span class="input-group-btn ml-2">
                          <button type="button" class="quantity-right-plus btn" data-type="plus">
                            <i class="ion-ios-add"></i>
                          </button>
                        </span>
                      </div>
                    </td>
                    
                    <td class="total">₹<%= (item.product.price * item.quantity).toFixed(2) %></td>
                  </tr>
                <% }) %>
              <% } else { %>
                <tr>
                  <td colspan="6" class="text-center">Your cart is empty</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
    </div>


    <div class="row justify-content-end">
      <div class="col-lg-4 mt-5 cart-wrap ftco-animate">
        <div class="cart-total mb-3">
            <h3>Coupon Code</h3>
            <p>Enter your coupon code if you have one</p>
            <form action="#" class="info">
                <div class="form-group">
                    <label for="">Coupon code</label>
                    <input type="text" id="couponInput" class="form-control text-left px-3" placeholder="Enter coupon code">
                </div>
            </form>
            <div class="alert alert-success" id="successAlert" style="display: none;"></div>
            <div class="alert alert-error" id="errorAlert" style="display: none;"></div>
            <div class="discount-info" id="discountInfo" style="display: none;">
                <p>Discount Amount: ₹<span id="discountAmount">0</span></p>
                <p>Final Amount: ₹<span id="finalAmount">0</span></p>
            </div>
        </div>
        <p><button onclick="applyCouponCode()" class="btn btn-primary py-3 px-4">Apply Coupon</button></p>
     </div>
    

      
    <div class="col-lg-4 mt-5 cart-wrap ftco-animate">
      <div class="coupon-container">
          <h5>Available Coupons</h5>
          <% if(coupons && coupons.length > 0) { %>
              <% coupons.forEach(function(coupon) { %>
                  <div class="coupon-card">
                      <div class="coupon-text">
                          <span class="coupon-code"><%= coupon.couponCode %></span>
                          <span class="coupon-details">Get <%= coupon.discount %>% off • Min purchase: ₹<%= coupon.minimumPurchase %></span>
                      </div>
                      <button class="copy-btn">Copy</button>
                  </div>
              <% }); %>
          <% } else { %>
              <p>No coupons available at the moment.</p>
          <% } %>
      </div>
    </div>

      
      
      
      
      <div class="col-lg-4 mt-5 cart-wrap ftco-animate">
        <div class="cart-total mb-3">
          <h3>Cart Totals</h3>
          <p class="d-flex">
            <span>Subtotal</span>
            <span class="cart-subtotal">₹<%= totalPrice.toFixed(2) %></span>
          </p>
          <p class="d-flex">
            <span>Delivery</span>
            <span class="delivery-charge">₹0.00</span>
          </p>
          <p class="d-flex">
            <span>Discount</span>
            <span class="discount-amount">₹<%= (discountAmount || 0).toFixed(2) %></span>
          </p>
          <hr>
          <p class="d-flex total-price">
            <span>Total</span>
            <span class="cart-total-amount">₹<%= (finalAmount || totalPrice).toFixed(2) %></span>
          </p>
        </div>
        <% if (products && products.length > 0) { %>
          <p><a href="/user/checkout" class="btn btn-primary py-3 px-4">Proceed to Checkout</a></p>
        <% } %>
      </div>
    </div>


     
    </div>
  </div>
</section>


<script>

document.addEventListener('DOMContentLoaded', () => {
    // Utility function to format currency
    function formatCurrency(amount) {
        return `₹${parseFloat(amount).toFixed(2)}`;
    }

    // Utility function to show notifications using SweetAlert
    function showNotification(message, type = 'success') {
        Swal.fire({
            text: message,
            icon: type,
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000
        });
    }

    // Function to update displayed totals after coupon application
    function updateTotalsAfterCoupon(discountAmount, finalAmount) {
        const discountElement = document.querySelector('.discount-amount');
        const finalTotalElement = document.querySelector('.cart-total-amount');
        
        if (discountElement) {
            discountElement.textContent = formatCurrency(discountAmount);
        }
        
        if (finalTotalElement) {
            finalTotalElement.textContent = formatCurrency(finalAmount);
        }
    }

    // Handle coupon copy functionality
    const copyButtons = document.querySelectorAll('.copy-btn');
    copyButtons.forEach(button => {
        button.addEventListener('click', async () => {
            const code = button.closest('.coupon-card').querySelector('.coupon-code').textContent;
            try {
                await navigator.clipboard.writeText(code);
                button.textContent = 'Copied!';
                button.classList.add('copied');
                
                setTimeout(() => {
                    button.textContent = 'Copy';
                    button.classList.remove('copied');
                }, 1500);
            } catch (err) {
                console.error('Failed to copy:', err);
                showNotification('Failed to copy coupon code', 'error');
            }
        });
    });

    // Handle coupon application
    const applyCouponButton = document.querySelector('.btn-primary[onclick="applyCouponCode()"]');
    if (applyCouponButton) {
        applyCouponButton.addEventListener('click', async (e) => {
            e.preventDefault();
            
            const couponInput = document.getElementById('couponInput');
            const couponCode = couponInput?.value?.trim();
            
            if (!couponCode) {
                showNotification('Please enter a coupon code', 'error');
                return;
            }

            try {
                const response = await fetch('/user/applyCoupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        couponCode: couponCode
                    })
                });

                const data = await response.json();

                if (data.success) {
                    showNotification('Coupon applied successfully');
                    updateTotalsAfterCoupon(data.discountAmount, data.finalAmount);
                    couponInput.value = ''; // Clear input after successful application
                } else {
                    showNotification(data.message || 'Invalid coupon code', 'error');
                }
            } catch (error) {
                console.error('Apply coupon error:', error);
                showNotification('Error applying coupon', 'error');
            }
        });
    }
});


document.addEventListener('DOMContentLoaded', () => {
  // Utility function to show notifications
  function showNotification(message, type = 'success') {
    Swal.fire(message); // Fallback implementation
  }

  // Utility function to update cart count in header
  function updateCartCount(count) {
    const cartCountElement = document.getElementById('cart-count');
    if (cartCountElement) {
      cartCountElement.textContent = count;
    }
  }

  // Function to update cart totals
  function updateCartTotals() {
    let subtotal = 0;
    const rows = document.querySelectorAll('tr[data-product-id]');
    
    rows.forEach(row => {
      const totalElement = row.querySelector('.total');
      const total = parseFloat(totalElement.textContent.replace('₹', '')) || 0;
      subtotal += total;
    });

    // Update all total-related displays
    const subtotalDisplay = document.querySelector('.cart-subtotal');
    const deliveryDisplay = document.querySelector('.delivery-charge');
    const discountDisplay = document.querySelector('.discount-amount');
    const finalTotalDisplay = document.querySelector('.cart-total-amount');

    // Get current values
    const delivery = deliveryDisplay ? parseFloat(deliveryDisplay.textContent.replace('₹', '')) || 0 : 0;
    const discount = discountDisplay ? parseFloat(discountDisplay.textContent.replace('₹', '')) || 0 : 0;

    // Update displays
    if (subtotalDisplay) {
      subtotalDisplay.textContent = `₹${subtotal.toFixed(2)}`;
    }
    
    // Calculate and update final total
    const finalTotal = subtotal + delivery - discount;
    if (finalTotalDisplay) {
      finalTotalDisplay.textContent = `₹${finalTotal.toFixed(2)}`;
    }
  }

  // Handle quantity changes with plus/minus buttons
  const quantityButtons = document.querySelectorAll('.quantity-left-minus, .quantity-right-plus');
  quantityButtons.forEach(button => {
    button.addEventListener('click', async (e) => {
      e.preventDefault();
      
      const inputGroup = button.closest('.input-group');
      const input = inputGroup.querySelector('.quantity');
      const row = button.closest('tr');
      
      const currentVal = parseInt(input.value) || 0;
      const maxStock = parseInt(input.getAttribute('data-stock')) || 0;
      const isPlus = button.classList.contains('quantity-right-plus');
      const productId = input.getAttribute('data-product-id');
      
      let newVal;
      if (isPlus) {
        newVal = currentVal + 1;
        if (newVal > maxStock) {
          showNotification(`Only ${maxStock} items available in stock`, 'error');
          return;
        }
      } else {
        newVal = currentVal - 1;
        if (newVal < 1) {
          return;
        }
      }
      
      try {
        const response = await fetch('/user/cart/updateQuantity', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ productId, quantity: newVal })
        });

        const data = await response.json();

        if (data.success) {
          // Update quantity input
          input.value = newVal;
          
          // Update row total
          const priceElement = row.querySelector('.price');
          const totalElement = row.querySelector('.total');
          const price = parseFloat(priceElement.textContent.replace('₹', '')) || 0;
          const newTotal = price * newVal;
          totalElement.textContent = `₹${newTotal.toFixed(2)}`;
          
          // Update cart totals
          updateCartTotals();
        } else {
          input.value = currentVal; // Reset to previous value
          showNotification(data.message || 'Failed to update quantity', 'error');
          
          if (data.availableStock) {
            input.setAttribute('max', data.availableStock);
            input.setAttribute('data-stock', data.availableStock);
          }
        }
      } catch (error) {
        console.error('Update quantity error:', error);$
        input.value = currentVal;
        showNotification('Error updating quantity', 'error');
      }
    });
  });

  // Handle product removal
  const removeButtons = document.querySelectorAll('.product-remove a');
  removeButtons.forEach(button => {
    button.addEventListener('click', async (event) => {
      event.preventDefault();
      
      const row = button.closest('tr');
      const productId = row.getAttribute('data-product-id');

      Swal.fire({
        title: 'Are you sure?',
        text: 'Do you really want to remove this product from cart? This action cannot be undone.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'No, cancel',
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            const response = await fetch('/user/cart/removeProduct', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ productId })
            });

            const data = await response.json();

            if (data.success) {
              row.remove();
              updateCartTotals();
              updateCartCount(data.cartCount || 0);
              Swal.fire('Item removed from cart');

              // Check if cart is empty and update UI accordingly
              const remainingRows = document.querySelectorAll('tr[data-product-id]');
              if (remainingRows.length === 0) {
                const tbody = document.querySelector('tbody');
                if (tbody) {
                  tbody.innerHTML = `<tr><td colspan="6" class="text-center">Your cart is empty</td></tr>`;
                }
              }
            } else {
              Swal.fire(data.message || 'Failed to remove item from cart', 'error');
            }
          } catch (error) {
            console.error('Remove from cart error:', error);
            Swal.fire('An error occurred while removing the item from cart', 'error');
          }
        }
      });
    });
  });

  // Handle "Add to Cart" functionality
  document.querySelectorAll('.buy-now').forEach(button => {
    button.addEventListener('click', async (e) => {
      e.preventDefault();
      const productId = button.dataset.productId;
      const quantityInput = document.getElementById('quantity');
      const quantity = parseInt(quantityInput?.value) || 1;
      
      try {
        const response = await fetch('/user/cart/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ productId, quantity })
        });
        
        const data = await response.json();
        if (data.success) {
          Swal.fire('Product added to cart');
          updateCartCount(data.cartCount);
          
          // Optionally refresh the page or update cart display
          if (data.redirect) {
            window.location.href = data.redirect;
          }
        } else {
          Swal.fire(data.message || 'Failed to add product to cart', 'error');
        }
      } catch (error) {
        console.error('Add to cart error:', error);
        showNotification('Failed to add product to cart', 'error');
      }
    });
  });

  // Handle coupon code application
  const couponForm = document.querySelector('.info');
  const applyCouponButton = document.querySelector('.btn-primary[href="#"]');
  
  if (applyCouponButton && couponForm) {
    applyCouponButton.addEventListener('click', async (e) => {
      e.preventDefault();
      
      const couponInput = couponForm.querySelector('input[type="text"]');
      const couponCode = couponInput?.value?.trim();
      
      if (!couponCode) {
        showNotification('Please enter a coupon code', 'error');
        return;
      }

      try {
        const response = await fetch('/user/cart/applyCoupon', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ couponCode })
        });

        const data = await response.json();

        if (data.success) {
          showNotification('Coupon applied successfully');
          
          // Update discount and total amounts
          const discountDisplay = document.querySelector('.discount-amount');
          if (discountDisplay && data.discount) {
            discountDisplay.textContent = `₹${data.discount.toFixed(2)}`;
          }
          
          updateCartTotals();
        } else {
          showNotification(data.message || 'Invalid coupon code', 'error');
        }
      } catch (error) {
        console.error('Apply coupon error:', error);
        showNotification('Error applying coupon', 'error');
      }
    });
  }

  // Initialize totals when page loads
  updateCartTotals();
});






</script>