
<div class="hero-wrap hero-bread" style="background-image: url('/images/bg_1.jpg');">
    <div class="container">
      <div class="row no-gutters slider-text align-items-center justify-content-center">
        <div class="col-md-9 ftco-animate text-center">
          <p class="breadcrumbs">
            <span class="mr-2"><a href="/user/home">Home</a></span> 
            <% if(currentPage !== 'Home') { %>
                <span><%= currentPage %></span>
            <% } %>
        </p>
          <h1 class="mb-0 bread">Checkout</h1>
        </div>
      </div>
    </div>
  </div>
  
  <section class="ftco-section">
    <div class="container">
        <!-- Delivery Address Section -->
        <div class="delivery-address-section">
            <h3 class="mb-4 delivery-heading">Delivery Address</h3>
            <form id="checkoutForm">
                <div class="saved-address-list">
                    <% addresses.forEach(function(address) { %>
                        <div class="saved-address-item">
                            <div class="address-radio-group">
                                <input 
                                    type="radio" 
                                    name="savedAddress" 
                                    value="<%= address._id %>" 
                                    id="address<%= address._id %>"
                                    required
                                >
                                <label for="address<%= address._id %>" class="address-label">
                                    <div class="address-content">
                                        <p class="saved-address-details">
                                            <%= address.firstname %> <%= address.lastname %>, 
                                            <%= address.address %>, 
                                            <%= address.postalCode %>, 
                                            <%= address.email %>
                                        </p>
                                        <p class="saved-address-phone">
                                            <%= address.mobile %>
                                        </p>
                                    </div>
                                </label>
                            </div>
                        </div>
                    <% });%>
                </div>

                <div class="row justify-content-center">
                    <div class="col-xl-7 ftco-animate">
                        <!-- Billing Form -->
                        <div class="billing-form">
                            <h3 class="mb-4 billing-heading">Billing Details</h3>
                            <div class="row align-items-end">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="firstname">First Name</label>
                                        <input type="text" class="form-control" id="firstname" name="firstName" required>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="lastname">Last Name</label>
                                        <input type="text" class="form-control" id="lastname" name="lastName" required>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="email">Email Address</label>
                                        <input type="email" class="form-control" id="email" name="email" required>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="mobile">Mobile Number</label>
                                        <input type="tel" class="form-control" id="mobile" name="mobileNumber" required>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label for="address">Address</label>
                                        <input type="text" class="form-control" id="address" name="address" placeholder="Your full address" required>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="postalCode">Postal Code</label>
                                        <input type="text" class="form-control" id="postalCode" name="postalCode" required>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group mt-4">
                                        <div class="checkbox">
                                            <label>
                                                <input type="checkbox" id="sameAsDelivery" name="sameAsDelivery" class="mr-2">
                                                Same as delivery address
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Cart Total and Payment Section -->
                    <div class="col-xl-5">
                        <div class="row mt-5 pt-3">
                            <div class="col-md-12 d-flex mb-5">
                                <div class="cart-detail cart-total p-3 p-md-4">
                                    <h3 class="billing-heading mb-4">Cart Total</h3>
                                    <p class="d-flex">
                                        <span>Subtotal</span>
                                        <span>₹<%= cartTotal.toFixed(2) %></span>
                                    </p>
                                    <p class="d-flex">
                                        <span>Delivery</span>
                                        <span>₹<%= deliveryCharge.toFixed(2) %></span>
                                    </p>
                                    <p class="d-flex">
                                        <span>Discount</span>
                                        <span>-₹<%= discount.toFixed(2) %></span>
                                    </p>
                                    <hr>
                                    <p class="d-flex total-price">
                                        <span>Total</span>
                                        <span>₹<%= finalTotal.toFixed(2) %></span>
                                    </p>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="cart-detail p-3 p-md-4">
                                    <h3 class="billing-heading mb-4">Payment Method</h3>
                                    <div class="form-group">
                                        <div class="col-md-12">
                                            <div class="radio">
                                                <label>
                                                    <input type="radio" name="payment" value="wallet" class="mr-2" >
                                                    Wallet
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-12">
                                            <div class="radio">
                                                <label>
                                                    <input type="radio" name="payment" value="cod" class="mr-2" >
                                                    Cash on Delivery
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-12">
                                            <div class="radio">
                                                <label>
                                                    <input type="radio" name="payment" value="razorpay" class="mr-2" >
                                                    Razorpay
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-12">
                                            <div class="checkbox">
                                                <label>
                                                    <input type="checkbox" id="terms" class="mr-2" >
                                                    I have read and accept the terms and conditions
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                    <button type="submit" class="btn btn-primary py-3 px-4 w-100">Place Order</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</section>
<script>
    document.addEventListener('DOMContentLoaded', function() {
    // Get all required elements
    const checkoutForm = document.getElementById('checkoutForm');
    const sameAsDeliveryCheckbox = document.getElementById('sameAsDelivery');
    const paymentMethods = document.querySelectorAll('input[name="payment"]');
    const termsCheckbox = document.getElementById('terms');
    const submitButton = checkoutForm.querySelector('button[type="submit"]');

    // Form field IDs for billing details
    const billingFields = {
        firstname: document.getElementById('firstname'),
        lastname: document.getElementById('lastname'),
        email: document.getElementById('email'),
        mobile: document.getElementById('mobile'),
        address: document.getElementById('address'),
        postalCode: document.getElementById('postalCode')
    };

    // Validate email format
    function isValidEmail(email) {
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }

    // Validate mobile number (10 digits)
    function isValidMobile(mobile) {
        return /^\d{10}$/.test(mobile);
    }

    // Validate postal code (6 digits)
    function isValidPostalCode(code) {
        return /^\d{6}$/.test(code);
    }

    // Function to validate all form fields
    function validateFormFields() {
        const errors = [];

        // Check if delivery address is selected
        const selectedAddress = document.querySelector('input[name="savedAddress"]:checked');
        if (!selectedAddress) {
            errors.push('Please select a delivery address');
        }

        // Validate billing details
        if (!billingFields.firstname.value.trim()) {
            errors.push('First name is required');
        }

        if (!billingFields.lastname.value.trim()) {
            errors.push('Last name is required');
        }

        if (!billingFields.email.value.trim()) {
            errors.push('Email is required');
        } else if (!isValidEmail(billingFields.email.value)) {
            errors.push('Please enter a valid email address');
        }

        if (!billingFields.mobile.value.trim()) {
            errors.push('Mobile number is required');
        } else if (!isValidMobile(billingFields.mobile.value)) {
            errors.push('Please enter a valid 10-digit mobile number');
        }

        if (!billingFields.address.value.trim()) {
            errors.push('Address is required');
        }

        if (!billingFields.postalCode.value.trim()) {
            errors.push('Postal code is required');
        } else if (!isValidPostalCode(billingFields.postalCode.value)) {
            errors.push('Please enter a valid 6-digit postal code');
        }

        // Check payment method
        const selectedPayment = document.querySelector('input[name="payment"]:checked');
        if (!selectedPayment) {
            errors.push('Please select a payment method');
        }

        // Check terms acceptance
        if (!termsCheckbox.checked) {
            errors.push('Please accept the terms and conditions');
        }

        return errors;
    }

    // Function to copy delivery address to billing
    sameAsDeliveryCheckbox.addEventListener('change', async function() {
        if (!this.checked) {
            clearBillingForm();
            return;
        }

        const selectedAddress = document.querySelector('input[name="savedAddress"]:checked');
        if (!selectedAddress) {
            Swal.fire({
                icon: 'warning',
                title: 'Select Address',
                text: 'Please select a delivery address first'
            });
            this.checked = false;
            return;
        }

        try {
            const addressDiv = selectedAddress.closest('.saved-address-item');
            const details = addressDiv.querySelector('.saved-address-details').textContent;
            const phone = addressDiv.querySelector('.saved-address-phone').textContent;

            // Split the details string and clean up each part
            const parts = details.split(',').map(part => part.trim());
            const firstLastName = parts[0].split(' ').map(part => part.trim());
            
            billingFields.firstname.value = firstLastName[0];
            billingFields.lastname.value = firstLastName[1] || '';
            billingFields.email.value = parts[3];
            billingFields.mobile.value = phone.trim();
            billingFields.address.value = parts[1];
            billingFields.postalCode.value = parts[2];

        } catch (error) {
            console.error('Error copying address:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to copy address details. Please fill in manually.'
            });
            this.checked = false;
            clearBillingForm();
        }
    });

    // Function to clear billing form
    function clearBillingForm() {
        Object.values(billingFields).forEach(field => field.value = '');
    }

    // Handle payment method selection
    paymentMethods.forEach(method => {
        method.addEventListener('change', async function() {
            if (this.value === 'wallet') {
                try {
                    // Get wallet balance
                    const response = await fetch('/user/check-wallet-balance');
                    const data = await response.json();
                    
                    // Get order total from the page
                    const orderTotal = parseFloat(document.querySelector('.total-price span:last-child')
                        .textContent.replace('₹', ''));

                    if (!data.success || data.balance < orderTotal) {
                        // Show error if balance is insufficient
                        Swal.fire({
                            icon: 'warning',
                            title: 'Insufficient Balance',
                            text: 'Your wallet balance is insufficient for this purchase.',
                            showCancelButton: true,
                            confirmButtonText: 'Add Funds',
                            cancelButtonText: 'Choose Different Payment'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '/user/wallet';
                            } else {
                                this.checked = false;
                            }
                        });
                    } else {
                        // Show success if balance is sufficient
                        Swal.fire({
                            icon: 'success',
                            title: 'Balance Available',
                            text: 'Sufficient balance in your wallet',
                            timer: 1500
                        });
                    }
                } catch (error) {
                    // Show error if check fails
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Unable to verify wallet balance. Please try again.'
                    });
                    this.checked = false;
                }
            }
        });
    });

    // Handle form submission
    checkoutForm.addEventListener('submit', async function(e) {
        e.preventDefault();

        // Validate form
        const errors = validateFormFields();
        if (errors.length > 0) {
            Swal.fire({
                icon: 'warning',
                title: 'Form Validation',
                html: errors.join('<br>')
            });
            return;
        }

        // Prepare form data
        const formData = {
            addressId: document.querySelector('input[name="savedAddress"]:checked').value,
            paymentMethod: document.querySelector('input[name="payment"]:checked').value,
            billing: {
                firstName: billingFields.firstname.value,
                lastName: billingFields.lastname.value,
                email: billingFields.email.value,
                phone: billingFields.mobile.value,
                address: billingFields.address.value,
                postcode: billingFields.postalCode.value
            }
        };

        try {
            // Disable submit button
            submitButton.disabled = true;
            submitButton.textContent = 'Processing...';

            const response = await fetch('/user/placeOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            const result = await response.json();

            if (result.success) {
                // Handle Razorpay payment
                if (formData.paymentMethod === 'razorpay') {
                    const razorpayOptions = {
                        key: result.razorpay.key,
                        amount: result.razorpay.amount, 
                        currency: result.razorpay.currency,
                        order_id: result.razorpay.orderID,
                        handler: function (response) {
                            // Call backend to verify payment
                            const paymentData = {
                                razorpay_order_id: result.razorpay.orderID,
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_signature: response.razorpay_signature
                            };

                            // Verify the payment on backend
                            fetch('/user/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(paymentData)
                            })
                            .then(verifyResponse => verifyResponse.json())
                            .then(verifyResult => {
                                if (verifyResult.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Payment Successful',
                                        text: 'Your order has been confirmed.',
                                        timer: 2000,
                                        showConfirmButton: false
                                    }).then(() => {
                                        window.location.href = `/user/orderSuccess/${result.orderID}`;
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment Failed',
                                        text: verifyResult.message || 'Failed to verify payment.'
                                    }).then(() => {
                        window.location.href = `/user/orderFailed/${result.orderID}`;
                    });
                                    
                                }
                            })
                            .catch(error => {
                            
                                console.error('Payment verification failed:', error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Payment Failed',
                                    text: 'Failed to verify payment. Please try again later.'
                                }).then(() => {
                    window.location.href = `/user/orderFailed/${result.orderID}`;
                });
                            });
                        },"modal": {
                            "ondismiss": function() {
                               // Handle case when user closes Razorpay modal
                          window.location.href = `/user/orderFailed/${result.orderID}`;
                         }
                       },
                        prefill: {
                            name: billingFields.firstname.value + ' ' + billingFields.lastname.value,
                            email: billingFields.email.value,
                            contact: billingFields.mobile.value
                        },
                        theme: {
                            color: '#F37254'
                        }
                    };

                    const razorpay = new Razorpay(razorpayOptions);
                    razorpay.open();
                }  else if (formData.paymentMethod === 'wallet') {
   
    if (result.success) {
        Swal.fire({
            icon: 'success',
            title: 'Order Placed!',
            text: 'Payment completed using wallet balance',
            timer: 2000,
            showConfirmButton: false
        }).then(() => {
            window.location.href = `/user/orderSuccess/${result.orderID}`;
        });
    } else {
        throw new Error(result.message || 'Wallet payment failed');
    }
} else {
                    // Handle Cash on Delivery (COD)
                    Swal.fire({
                        icon: 'success',
                        title: 'Order Placed!',
                        text: 'Your order has been placed successfully',
                        timer: 2000,
                        showConfirmButton: false
                    }).then(() => {
                        window.location.href = `/user/orderSuccess/${result.orderID}`;
                    });
                }
            } else {
                throw new Error(result.message || 'Failed to place order');
            }
        } catch (error) {
            console.error('Order submission error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Order Failed',
                text: error.message || 'Failed to place order. Please try again.'
            });
        } finally {
            // Re-enable submit button
            submitButton.disabled = false;
            submitButton.textContent = 'Place Order';
        }
    });
});
</script>

