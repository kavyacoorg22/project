<div class="login-container">
    <form id="loginform">
        <div class="form-group">
            <label>emailid</label>
            <input type="email" name="email" id="email" autocomplete="off" required>
        </div>
  
        <div class="form-group">
            <label>password</label>
            <input type="password" name="password" id="password" autocomplete="off"required>
        </div>
  
        <div class="links-container">
            <div class="signup-link">
                No Account yet? <a href="/user/signup">SIGN UP</a>
            </div>
            <a href="/user/email" class="forgot-link">forgetpassword?</a>
        </div>
  
        <button type="submit" class="login-btn">login</button>
  
        <div class="or-divider">or</div>
  
        <button type="button" class="google-btn">
            <img src="https://cdn-icons-png.flaticon.com/512/2991/2991147.png" alt="Google" class="google-icon">
            Sign up with Google
        </button>
    </form>
  </div>
  
  <script>
      const urlParams = new URLSearchParams(window.location.search);
const errorMessage = urlParams.get('error');
if (errorMessage) {
  Swal.fire(errorMessage); // Or display the message in an error alert on the page
}
      document.addEventListener('DOMContentLoaded', () => {
          document.getElementById('loginform').addEventListener('submit', async (event) => {
              event.preventDefault(); // Prevent the default form submission
            
              
              const formData = new FormData(event.target);
              const data = Object.fromEntries(formData.entries());
              console.log('Form data:', data); // Debug log
  
              try {
                  const response = await fetch('/user/login', {
                      method: 'POST',
                      headers: {
                          'Content-Type': 'application/json',
                      },
                      body: JSON.stringify(data),
                  });
  
                  let result;
                  try {
                      result = await response.json();
                  } catch (jsonError) {
                      console.error('Error parsing JSON:', jsonError);
                      Swal.fire('Unexpected server response. Please try again later.');
                      return;
                  }
              
                  if (response.ok) {
                      Swal.fire(result.message);
                      window.location.href = '/user/home';
                  } else {
                      Swal.fire(result.message);
                  }
              } catch (error) {
                  console.error('Fetch error:', error);
                  Swal.fire('An error occurred. Please check your network or try again later.');
              }
          });
      });
      document.querySelector('.google-btn').addEventListener('click', () => {
  window.location.href = '/user/auth/google';
});


if (window.history.replaceState) {
        window.history.replaceState(null, null, window.location.href);
    }
    
    window.addEventListener('pageshow', function(event) {
        if (event.persisted) {
            window.location.reload();
        }
    });
  </script>